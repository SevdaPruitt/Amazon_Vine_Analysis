import os

# Find the latest version of spark 3.0 from http://www.apache.org/dist/spark/ and enter as the spark version
# For example:
# spark_version = 'spark-3.0.3'
spark_version = 'spark-3.0.3'
os.environ['SPARK_VERSION']=spark_version

# Install Spark and Java
!apt-get update
!apt-get install openjdk-11-jdk-headless -qq > /dev/null
!wget -q http://www.apache.org/dist/spark/$SPARK_VERSION/$SPARK_VERSION-bin-hadoop2.7.tgz
!tar xf $SPARK_VERSION-bin-hadoop2.7.tgz
!pip install -q findspark

# Set Environment Variables
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-11-openjdk-amd64"
os.environ["SPARK_HOME"] = f"/content/{spark_version}-bin-hadoop2.7"

# Start a SparkSession
import findspark
findspark.init()

# Download the Postgres driver that will allow Spark to interact with Postgres.
!wget https://jdbc.postgresql.org/download/postgresql-42.2.16.jar

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName("M16-Amazon-Challenge").config("spark.driver.extraClassPath","/content/postgresql-42.2.16.jar").getOrCreate()

from pyspark import SparkFiles
url = "https://s3.amazonaws.com/amazon-reviews-pds/tsv/amazon_reviews_us_Wireless_v1_00.tsv.gz"
spark.sparkContext.addFile(url)
df = spark.read.option("encoding", "UTF-8").csv(SparkFiles.get("amazon_reviews_us_Wireless_v1_00.tsv.gz"), sep="\t", header=True, inferSchema=True)
df.show()
df.count()

# Create the vine_table. DataFrame
from pyspark.sql.types import IntegerType

vine_df =df.select(['review_id','star_rating', 'helpful_votes', 'total_votes', 'vine', 'verified_purchase'])
vine_df = vine_df.withColumn("star_rating", vine_df["star_rating"].cast(IntegerType()))
vine_df.show()


# Filter the data and create a new DataFrame o

total_votes_20_df = vine_df.filter('total_votes > 20')
total_votes_20_df.show()
total_votes_20_df.count()

# Create helpful_rate DataFrame
helpful_votes_rate_df = total_votes_20_df.filter(total_votes_20_df.helpful_votes /total_votes_20_df.total_votes >= "0.50")
helpful_votes_rate_df.show()
helpful_votes_rate_df.count()

# Create Vine Program DataFrame for reviews that are a part of the program
vine_yes_df = total_votes_20_df.filter(total_votes_20_df.vine == "Y")
vine_yes_df.show()
vine_yes_df.count()

# Create Vine Program DataFrame for reviews that are NOT a part of the program
vine_no_df = total_votes_20_df.filter(total_votes_20_df.vine == "N")
vine_no_df.show()
vine_no_df.count()

total_votes_20_df.count()


# Total number of 5-star reviews
five_stars_df = total_votes_20_df.filter(total_votes_20_df.star_rating == "5")
five_stars_df.count()

# Total number of paid 5-star reviews

vine_five_df = vine_yes_df.filter(vine_yes_df.star_rating == "5")
vine_five_df.count()

# Total number of paid 5-star reviews unpaid

unpaid_vine_five_df = vine_no_df.filter(vine_no_df.star_rating == "5")
unpaid_vine_five_df.count()